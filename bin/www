#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('datn-backend:server');
var http = require('http');
var { Server } = require('socket.io'); // Import Socket.IO
const User = require('../models/User')

let adminSockets = []
let userSockets = []

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 4000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Tích hợp Socket.IO với server
var io = new Server(server, {
  cors: {
    origin: '*', // URL frontend
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    credentials: true,
  },
});

// Lắng nghe các sự kiện Socket.IO
io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  // Nhận ID người dùng từ client để lưu lại socket ID
  socket.on('registerUser', async (userId) => {
    try {
      await User.findByIdAndUpdate(userId, {
        socketId: socket.id,
        isConnected: true,
      });
      console.log(`User ${userId} registered with socket ID: ${socket.id}`);
    } catch (error) {
      console.error('Error updating user socket ID:', error);
    }
  });

  socket.on('registerAdmin', () => {
    adminSockets.push(socket);
    console.log('Admin connected: ' + socket.id);
  });

  socket.on('sendMessageToAdmins', (message) => {
    adminSockets.forEach(adminSocket => {
      adminSocket.emit('receiveMessageFromUser', message);
    });
  });

  socket.on('disconnect', async () => {
    console.log('User disconnected:', socket.id);

    try {
      const user = await User.findOneAndUpdate(
        { socketId: socket.id },
        {
          $set: {
            isConnected: false,
            socketId: null,
          },
        }
      );

      if (user) {
        console.log(`User ${user._id} disconnected and socket ID removed.`);
      }
    } catch (error) {
      console.error('Error updating user disconnect status:', error);
    }
  });
});

// Lưu io để sử dụng trong các controller khác
app.set('io', io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
